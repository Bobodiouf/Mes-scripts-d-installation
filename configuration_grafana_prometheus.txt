# Guide Complet Grafana + Prometheus : Dashboards, Alertes & Email

## üéØ 1. Configuration initiale Grafana

### Acc√®s et premi√®re connexion
- **URL** : http://localhost:3000
- **Login** : admin / Passer (d√©fini dans votre docker-compose)

### Ajouter Prometheus comme Data Source
1. Aller dans **Configuration** > **Data sources**
2. Cliquer **Add data source**
3. S√©lectionner **Prometheus**
4. **URL** : `http://prometheus:9090`
5. Cliquer **Save & test**

---

## üìä 2. Dashboards pr√©-configur√©s (Import depuis Grafana.com)

### Dashboard Node Exporter (M√©triques syst√®me)
**ID Dashboard : 1860** - Node Exporter Full
1. Aller dans **+** > **Import**
2. Entrer l'ID : `1860`
3. S√©lectionner votre data source Prometheus
4. Cliquer **Import**

**M√©triques disponibles :**
- CPU usage, load average
- RAM, Swap, Disk usage
- Network I/O
- Disk I/O
- Temp√©rature syst√®me

### Dashboard Prometheus (Auto-monitoring)
**ID Dashboard : 3662** - Prometheus 2.0 Overview
- M√©triques internes de Prometheus
- Nombre de targets, r√®gles d'alerte
- Performance des scrapes

### Dashboard Blackbox Exporter
**ID Dashboard : 7587** - Prometheus Blackbox Exporter
- Tests de connectivit√© HTTP/HTTPS
- Temps de r√©ponse
- Codes de statut

---

## üö® 3. Configuration des Alertes Grafana

### √âtape 1 : Configurer les Contact Points (Email)

1. **Navigation** : Alerting > Contact points
2. **Cr√©er nouveau contact point** :
   - **Name** : Email-Admin
   - **Integration** : Email
   - **Addresses** : votre-email@exemple.com
   - **Subject** : `[ALERTE] {{ .GroupLabels.alertname }} - {{ .Status }}`
   - **Message** : 
   ```
   üö® **ALERTE SYST√àME**
   
   **Alert** : {{ .GroupLabels.alertname }}
   **Status** : {{ .Status }}
   **Severity** : {{ .GroupLabels.severity }}
   **Instance** : {{ .GroupLabels.instance }}
   **Description** : {{ .GroupLabels.description }}
   
   **D√©tails** :
   {{ range .Alerts }}
   - {{ .Annotations.summary }}
   {{ end }}
   
   **Time** : {{ .CommonLabels.grafana_folder }}
   ```

### √âtape 2 : Cr√©er des R√®gles d'Alerte

#### Alerte CPU √©lev√©
1. **Alerting** > **Alert rules** > **New rule**
2. **Configuration** :
   - **Rule name** : High CPU Usage
   - **Query A** : `100 - (avg by(instance) (rate(node_cpu_seconds_total{mode="idle"}[2m])) * 100)`
   - **Condition** : `IS ABOVE 80`
   - **Evaluation** : Every `10s` for `30s`

#### Alerte RAM √©lev√©e
- **Rule name** : High Memory Usage
- **Query** : `((node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes) * 100`
- **Condition** : `IS ABOVE 85`

#### Alerte Disque plein
- **Rule name** : Disk Space Low
- **Query** : `100 - ((node_filesystem_avail_bytes * 100) / node_filesystem_size_bytes)`
- **Condition** : `IS ABOVE 90`

#### Alerte Service Down
- **Rule name** : Service Down
- **Query** : `up == 0`
- **Condition** : `IS BELOW 1`

### √âtape 3 : Notification Policies
1. **Alerting** > **Notification policies**
2. **Edit** la politique par d√©faut
3. **Contact point** : Email-Admin
4. **Group by** : `alertname`
5. **Group wait** : 10s
6. **Group interval** : 5m
7. **Repeat interval** : 12h

---

## üé® 4. Dashboards Personnalis√©s

### Dashboard Principal - Vue d'ensemble

#### Panel 1 : CPU Usage
- **Type** : Stat
- **Query** : `100 - (avg(rate(node_cpu_seconds_total{mode="idle"}[2m])) * 100)`
- **Unit** : Percent (0-100)
- **Thresholds** : Green < 50, Yellow < 80, Red >= 80

#### Panel 2 : Memory Usage
- **Type** : Gauge
- **Query** : `((node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes) * 100`
- **Min/Max** : 0/100

#### Panel 3 : Disk Usage
- **Type** : Bar gauge
- **Query** : `100 - ((node_filesystem_avail_bytes{mountpoint="/"} * 100) / node_filesystem_size_bytes{mountpoint="/"})`

#### Panel 4 : Network Traffic
- **Type** : Time series
- **Query A** : `rate(node_network_receive_bytes_total[2m]) * 8`
- **Query B** : `rate(node_network_transmit_bytes_total[2m]) * 8`
- **Unit** : bits/sec

### Dashboard Services - Surveillance applicative

#### Panel 1 : Services Status
- **Type** : Stat
- **Query** : `up`
- **Value mappings** : 0 = DOWN (Red), 1 = UP (Green)

#### Panel 2 : HTTP Response Time
- **Type** : Time series  
- **Query** : `probe_duration_seconds`
- **Unit** : seconds

---

## üìß 5. Configuration Email SMTP

### Option 1 : Configuration via Environment Variables
Ajoutez dans votre `docker-compose.yml` :

```yaml
grafana:
  environment:
    - GF_SMTP_ENABLED=true
    - GF_SMTP_HOST=smtp.gmail.com:587
    - GF_SMTP_USER=votre-email@gmail.com
    - GF_SMTP_PASSWORD=votre-mot-de-passe-app
    - GF_SMTP_FROM_ADDRESS=votre-email@gmail.com
    - GF_SMTP_FROM_NAME=Grafana Monitoring
```

### Option 2 : Fichier de configuration
Cr√©ez `grafana.ini` et montez-le :

```ini
[smtp]
enabled = true
host = smtp.gmail.com:587
user = votre-email@gmail.com
password = votre-mot-de-passe-app
from_address = votre-email@gmail.com
from_name = Grafana Monitoring
```

---

## üìà 6. M√©triques Avanc√©es et Monitoring

### M√©triques Business
- **Queries personnalis√©es** pour vos applications
- **SLI/SLO tracking** avec Prometheus
- **Error rates, latency, throughput**

### Variables de Dashboard
- **Instance** : `label_values(up, instance)`
- **Job** : `label_values(up, job)`
- **Time range** : S√©lecteur temporel

### Annotations automatiques
- **Deployments** depuis CI/CD
- **Incidents** depuis votre syst√®me de tickets
- **Maintenance windows**

---

## üîß 7. Optimisations et Bonnes Pratiques

### Performance
- **Recording rules** pour les calculs complexes
- **Retention policies** adapt√©es
- **Dashboard templating** pour la r√©utilisabilit√©

### S√©curit√©
- **Role-based access** dans Grafana
- **API keys** pour l'int√©gration
- **HTTPS** en production

### Alerting avanc√©
- **Alert dependencies** pour √©viter le spam
- **Escalation policies** par criticit√©
- **Integration** avec PagerDuty, Slack, Teams

---

## üöÄ 8. Cas d'Usage Concrets

### Infrastructure Monitoring
- **Surveillance serveurs** : CPU, RAM, Disk, Network
- **Services critiques** : Bases de donn√©es, web servers
- **Capacit√© planning** : Pr√©diction des besoins

### Application Monitoring
- **Performance monitoring** : Response time, throughput
- **Error tracking** : Taux d'erreur par service
- **User experience** : Temps de chargement pages

### Business Monitoring
- **KPIs m√©tier** : Ventes, conversions, utilisateurs actifs
- **SLA monitoring** : Disponibilit√© services
- **Cost monitoring** : Consommation ressources cloud

---

## üìã 9. Checklist de D√©ploiement

- [ ] Prometheus collecte les m√©triques
- [ ] Grafana connect√© √† Prometheus
- [ ] Dashboards import√©s et fonctionnels
- [ ] SMTP configur√© et test√©
- [ ] Contact points email cr√©√©s
- [ ] R√®gles d'alerte d√©finies et test√©es
- [ ] Notification policies configur√©es
- [ ] Tests d'alertes effectu√©s
- [ ] Documentation mise √† jour
- [ ] Formation √©quipes r√©alis√©e

---

## üÜò 10. Troubleshooting

### Probl√®mes courants
- **Pas de m√©triques** : V√©rifier la connectivit√© r√©seau
- **Alertes non re√ßues** : Tester la config SMTP
- **Dashboards vides** : V√©rifier les queries et timeranges
- **Performance lente** : Optimiser les queries, ajouter des recording rules

### Commandes utiles
```bash
# V√©rifier les logs
docker logs grafana
docker logs prometheus

# Tester connectivit√©
docker exec -it grafana wget -qO- http://prometheus:9090/metrics

# Recharger config Prometheus
curl -X POST http://localhost:9090/-/reload
```
---------------------------------------------------------- Docker Engine ----------------------------------------------------------------------
# 1. Installation
mkdir passbolt-docker && cd passbolt-docker
# Créer le docker-compose.yml avec la première configuration

# =================================================
# PASSBOLT - DÉPLOIEMENT AVEC DOCKER ENGINE
# =================================================

services:
  # Base de données MariaDB
  database:
    image: mariadb:10.11
    container_name: passbolt_db
    environment:
      MARIADB_ROOT_PASSWORD: root_password_super_secret
      MARIADB_DATABASE: passbolt
      MARIADB_USER: passbolt
      MARIADB_PASSWORD: passbolt_password_secret
    volumes:
      - passbolt_db_data:/var/lib/mysql
    networks:
      - passbolt_network
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password

  # Application Passbolt
  passbolt:
    image: passbolt/passbolt:latest-ce
    container_name: passbolt_app
    ports:
      - "80:80"
      - "443:443"
    environment:
      # Configuration de l'application
      APP_FULL_BASE_URL: https://passbolt.local
      
      # Configuration de la base de données
      DATASOURCES_DEFAULT_HOST: database
      DATASOURCES_DEFAULT_USERNAME: passbolt
      DATASOURCES_DEFAULT_PASSWORD: passbolt_password_secret
      DATASOURCES_DEFAULT_DATABASE: passbolt
      
      # Configuration email (optionnel pour le test)
      EMAIL_DEFAULT_FROM: admin@passbolt.local
      EMAIL_TRANSPORT_DEFAULT_HOST: localhost
      EMAIL_TRANSPORT_DEFAULT_PORT: 25
      
      # Clé GPG (générée automatiquement au premier démarrage)
      PASSBOLT_KEY_NAME: Passbolt Server
      PASSBOLT_KEY_EMAIL: admin@passbolt.local
      
    volumes:
      - passbolt_gpg:/etc/passbolt/gpg
      - passbolt_jwt:/etc/passbolt/jwt
      - passbolt_images:/usr/share/php/passbolt/webroot/img/public/images
    networks:
      - passbolt_network
    depends_on:
      - database
    restart: unless-stopped
    command: ["/usr/bin/wait-for.sh", "-t", "0", "database:3306", "--", "/docker-entrypoint.sh"]

networks:
  passbolt_network:
    driver: bridge

volumes:
  passbolt_db_data:
  passbolt_gpg:
  passbolt_jwt:
  passbolt_images:

# 2. Déploiement
docker compose up -d

# 3. Vérification
docker compose ps
docker compose logs passbolt

# 4. Création admin
docker exec -it passbolt_app su -m -c "bin/cake passbolt register_user -u admin@passbolt.local -f Admin -l User -r admin" -s /bin/sh www-data

# 5. Accès : https://passbolt.local
-------------------------------------------------------------- Portainer ------------------------------------------------------------------------

# 1. Installer Portainer d'abord
docker volume create portainer_data
docker run -d --name portainer --restart unless-stopped -p 9443:9443 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest

# 2. Accéder à Portainer : https://localhost:9443
# 3. Créer un compte admin
# 4. Aller dans "Stacks" > "Add Stack"
# 5. Coller la configuration Passbolt pour 

# =================================================
# PASSBOLT STACK POUR PORTAINER
# =================================================
# À copier-coller dans Portainer > Stacks > Add stack

services:
  # Base de données
  passbolt_db:
    image: mariadb:10.11
    environment:
      MARIADB_ROOT_PASSWORD: ChangeMe_RootPassword123!
      MARIADB_DATABASE: passbolt
      MARIADB_USER: passbolt
      MARIADB_PASSWORD: ChangeMe_PassboltPassword123!
    volumes:
      - passbolt_db_data:/var/lib/mysql
    networks:
      - passbolt_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      start_period: 1m
      start_interval: 10s
      interval: 1m
      timeout: 5s
      retries: 3

  # Application Passbolt
  passbolt_app:
    image: passbolt/passbolt:4.7.0-1-ce
    ports:
      - "8081:80"
      - "8443:443"
    environment:
      # URL de ton instance (change selon ton setup)
      APP_FULL_BASE_URL: https://localhost:8443
      
      # Configuration base de données
      DATASOURCES_DEFAULT_HOST: passbolt_db
      DATASOURCES_DEFAULT_USERNAME: passbolt
      DATASOURCES_DEFAULT_PASSWORD: ChangeMe_PassboltPassword123!
      DATASOURCES_DEFAULT_DATABASE: passbolt
      
      # Configuration email (pour les invitations)
      EMAIL_DEFAULT_FROM: ismael.mouloungui@groupebatimat.com
      EMAIL_TRANSPORT_DEFAULT_HOST: localhost
      EMAIL_TRANSPORT_DEFAULT_PORT: 25
      
      # Configuration GPG
      PASSBOLT_KEY_NAME: epxa dngg suza ktyr
      PASSBOLT_KEY_EMAIL: ismael.mouloungui@groupebatimat.com
      
    volumes:
      - passbolt_gpg_data:/etc/passbolt/gpg
      - passbolt_jwt_data:/etc/passbolt/jwt
      - passbolt_images:/usr/share/php/passbolt/webroot/img/public/images
    networks:
      - passbolt_net
    depends_on:
      passbolt_db:
        condition: service_healthy
    restart: unless-stopped

networks:
  passbolt_net:
    driver: bridge

volumes:
  passbolt_db_data:
    driver: local
  passbolt_gpg_data:
    driver: local
  passbolt_jwt_data:
    driver: local
  passbolt_images:
    driver: local

# 6. Cliquer "Deploy the stack"
-------------------------------------------------- Gestion des mis à jours -------------------------------------------------------------------------

# =================================================
# PASSBOLT AVEC GMAIL SMTP - DOCKER ENGINE
# =================================================

services:
  database:
    image: mariadb:10.11
    container_name: passbolt_db
    environment:
      MARIADB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-root_password_super_secret}
      MARIADB_DATABASE: ${DB_NAME:-passbolt}
      MARIADB_USER: ${DB_USER:-passbolt}
      MARIADB_PASSWORD: ${DB_PASSWORD:-passbolt_password_secret}
    volumes:
      - passbolt_db_data:/var/lib/mysql
    networks:
      - passbolt_network
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password

  passbolt:
    image: passbolt/passbolt:4.7.0-1-ce
    container_name: passbolt_app
    ports:
      - "80:80"
      - "443:443"
    environment:
      # Configuration de base
      APP_FULL_BASE_URL: ${APP_URL:-https://localhost}
      
      # Configuration base de données
      DATASOURCES_DEFAULT_HOST: database
      DATASOURCES_DEFAULT_USERNAME: ${DB_USER:-passbolt}
      DATASOURCES_DEFAULT_PASSWORD: ${DB_PASSWORD:-passbolt_password_secret}
      DATASOURCES_DEFAULT_DATABASE: ${DB_NAME:-passbolt}
      
      # 🎯 CONFIGURATION GMAIL SMTP
       EMAIL_TRANSPORT_DEFAULT_CLASS_NAME: Smtp
      EMAIL_DEFAULT_FROM_NAME: ${EMAIL_FROM_NAME:-Passbolt Admin}
      EMAIL_DEFAULT_FROM: ${EMAIL_FROM:-ismael.mouloungui@groupebatimat.com}
      EMAIL_TRANSPORT_DEFAULT_HOST: smtp.gmail.com
      EMAIL_TRANSPORT_DEFAULT_PORT: 587
      EMAIL_TRANSPORT_DEFAULT_USERNAME: ${GMAIL_USERNAME:-ismael.mouloungui@groupebatimat.com}
      EMAIL_TRANSPORT_DEFAULT_PASSWORD: ${GMAIL_APP_PASSWORD:-ton-mot-de-passe-app}
      EMAIL_TRANSPORT_DEFAULT_TLS: true
      EMAIL_TRANSPORT_DEFAULT_TIMEOUT: 30
      
      # Configuration GPG
      PASSBOLT_KEY_NAME: ${GPG_KEY_NAME:-Passbolt Server}
      PASSBOLT_KEY_EMAIL: ${EMAIL_FROM:-ismael.mouloungui@groupebatimat.com}
      
      # Sécurité
      PASSBOLT_REGISTRATION_PUBLIC: false
      
    volumes:
      - passbolt_gpg:/etc/passbolt/gpg
      - passbolt_jwt:/etc/passbolt/jwt
      - passbolt_images:/usr/share/php/passbolt/webroot/img/public/images
    networks:
      - passbolt_network
    depends_on:
      - database
    restart: unless-stopped

networks:
  passbolt_network:
    driver: bridge

volumes:
  passbolt_db_data:
  passbolt_gpg:
  passbolt_jwt:
  passbolt_images:
----------------------------------------- Config .env -----------------------------------------------------------------------------------------------
# =================================================
# FICHIER .env POUR PASSBOLT
# =================================================
# ⚠️  IMPORTANT: Ne jamais commiter ce fichier !
# Ajouter .env dans .gitignore

# Configuration de l'application
APP_URL=https://localhost
# Pour production, remplace par ton vrai domaine :
# APP_URL=https://passbolt.mondomaine.com

# Configuration base de données
DB_ROOT_PASSWORD=ChangeMoi_RootPassword123!
DB_NAME=passbolt
DB_USER=passbolt
DB_PASSWORD=ChangeMoi_PassboltPassword123!

# 📧 CONFIGURATION GMAIL SMTP
EMAIL_FROM_NAME=Équipe Passbolt
EMAIL_FROM=ismael.mouloungui@groupebatimat.com

# 🔑 REMPLACE CES VALEURS PAR LES TIENNES
GMAIL_USERNAME=ismael.mouloungui@groupebatimat.com
GMAIL_APP_PASSWORD=abcd efgh ijkl mnop
# ☝️ Le mot de passe d'application Gmail (16 caractères avec espaces)

# Configuration GPG
GPG_KEY_NAME=Passbolt Server Key

# =================================================
# COMMENT OBTENIR LE MOT DE PASSE D'APPLICATION GMAIL
# =================================================
# 
# 1. Va sur myaccount.google.com
# 2. Sécurité → Validation en 2 étapes (doit être activée)
# 3. Mots de passe des applications → Sélectionner l'app "Mail"
# 4. Générer → Noter le mot de passe (16 caractères)
# 5. Remplacer GMAIL_APP_PASSWORD ci-dessus
#
# =================================================

----------------------------------------------- Procédure de mise à jour ----------------------------------------------------------------------------
# =================================================
# PROCESSUS DE MISE À JOUR AVEC DOCKER ENGINE
# =================================================

# 1. MISE À JOUR DE LA CONFIGURATION
# ==================================

# Étape 1: Arrêter les services proprement
docker compose down

# Étape 2: Sauvegarder la configuration actuelle
cp docker-compose.yml docker-compose.yml.backup.$(date +%Y%m%d)
cp .env .env.backup.$(date +%Y%m%d) 2>/dev/null || true

# Étape 3: Éditer la configuration
nano docker-compose.yml
# ou
nano .env

# Étape 4: Vérifier la nouvelle configuration
docker compose config

# Étape 5: Relancer avec la nouvelle config
docker compose up -d

# 2. MISE À JOUR DE L'IMAGE PASSBOLT
# ==================================

# Voir la version actuelle
docker images | grep passbolt

# Télécharger la nouvelle version
docker pull passbolt/passbolt:latest-ce

# Arrêter, mettre à jour et redémarrer
docker compose down
docker compose pull  # Met à jour toutes les images
docker compose up -d

# Vérifier les logs après mise à jour
docker compose logs -f passbolt

# 3. SAUVEGARDE AVANT MISE À JOUR
# ===============================

# Sauvegarder les volumes importants
docker run --rm -v passbolt_db_data:/data -v $(pwd):/backup ubuntu tar czf /backup/passbolt_db_backup_$(date +%Y%m%d).tar.gz -C /data .

docker run --rm -v passbolt_gpg:/data -v $(pwd):/backup ubuntu tar czf /backup/passbolt_gpg_backup_$(date +%Y%m%d).tar.gz -C /data .

# Exporter la base de données
docker exec passbolt_db mysqldump -u root -proot_password_super_secret passbolt > passbolt_db_dump_$(date +%Y%m%d).sql

# 4. RESTAURATION EN CAS DE PROBLÈME
# ==================================

# Revenir à l'ancienne configuration
docker compose down
cp docker-compose.yml.backup.YYYYMMDD docker-compose.yml
docker compose up -d

# Restaurer un volume
docker run --rm -v passbolt_db_data:/data -v $(pwd):/backup ubuntu bash -c "cd /data && tar xzf /backup/passbolt_db_backup_YYYYMMDD.tar.gz"

# 5. SCRIPT D'AUTOMATISATION
# ==========================

#!/bin/bash
# update_passbolt.sh

set -e  # Arrêter en cas d'erreur

echo "🔄 Mise à jour Passbolt..."

# Sauvegarde
echo "💾 Sauvegarde..."
docker compose down
cp docker-compose.yml docker-compose.yml.backup.$(date +%Y%m%d)

# Mise à jour
echo "⬇️ Téléchargement des nouvelles images..."
docker compose pull

# Redémarrage
echo "🚀 Redémarrage..."
docker compose up -d

# Vérification
echo "✅ Vérification..."
sleep 30
docker compose ps

echo "✅ Mise à jour terminée !"
------------------------------------------------ Fin ----------------------------------------------------------------------------------------------

# =================================================
# STACK PASSBOLT POUR PORTAINER AVEC GMAIL SMTP  
# =================================================
# À copier dans Portainer > Stacks > Add Stack

services:
  # Base de données MariaDB
  passbolt_db:
    image: mariadb:10.11
    environment:
      MARIADB_ROOT_PASSWORD: ChangeMoi_RootPassword123!
      MARIADB_DATABASE: passbolt
      MARIADB_USER: passbolt
      MARIADB_PASSWORD: ChangeMoi_PassboltPassword123!
    volumes:
      - passbolt_db_data:/var/lib/mysql
    networks:
      - passbolt_net
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      start_period: 1m
      start_interval: 10s
      interval: 1m
      timeout: 5s
      retries: 3

  # Application Passbolt
  passbolt_app:
    image: passbolt/passbolt:4.7.0-1-ce
    ports:
      - "8080:80"
      - "8443:443"
    environment:
      # Configuration de base
      APP_FULL_BASE_URL: https://localhost:8443
      
      # Configuration base de données
      DATASOURCES_DEFAULT_HOST: passbolt_db
      DATASOURCES_DEFAULT_USERNAME: passbolt
      DATASOURCES_DEFAULT_PASSWORD: ChangeMoi_PassboltPassword123!
      DATASOURCES_DEFAULT_DATABASE: passbolt
      
      # 🎯 CONFIGURATION GMAIL SMTP
      # ⚠️ REMPLACE CES VALEURS PAR LES TIENNES !
      EMAIL_TRANSPORT_DEFAULT_CLASS_NAME: Smtp
      EMAIL_DEFAULT_FROM_NAME: Support IT
      EMAIL_DEFAULT_FROM: ismael.mouloungui@groupebatimat.com
      EMAIL_TRANSPORT_DEFAULT_HOST: smtp.gmail.com
      EMAIL_TRANSPORT_DEFAULT_PORT: 587
      EMAIL_TRANSPORT_DEFAULT_USERNAME: ismael.mouloungui@groupebatimat.com
      EMAIL_TRANSPORT_DEFAULT_PASSWORD: TON-MOT-DE-PASSE-APP-GMAIL
      EMAIL_TRANSPORT_DEFAULT_TLS: true
      EMAIL_TRANSPORT_DEFAULT_TIMEOUT: 30
      
      # Configuration GPG
      PASSBOLT_KEY_NAME: Passbolt Server Key
      PASSBOLT_KEY_EMAIL: ismael.mouloungui@groupebatimat.com
      
      # Sécurité
      PASSBOLT_REGISTRATION_PUBLIC: false
      PASSBOLT_SSL_FORCE: true
      
    volumes:
      - passbolt_gpg_data:/etc/passbolt/gpg
      - passbolt_jwt_data:/etc/passbolt/jwt
      - passbolt_images:/usr/share/php/passbolt/webroot/img/public/images
    networks:
      - passbolt_net
    depends_on:
      passbolt_db:
        condition: service_healthy
    restart: unless-stopped

networks:
  passbolt_net:
    driver: bridge

volumes:
  passbolt_db_data:
    driver: local
  passbolt_gpg_data:
    driver: local
  passbolt_jwt_data:
    driver: local
  passbolt_images:
    driver: local
---------------------------------------------------------- Fin -------------------------------------------------------------------------------------

# 1. Créer le projet
mkdir passbolt-prod && cd passbolt-prod

# 2. Créer le fichier .env
cat > .env << 'EOF'
# Remplace ces valeurs !
APP_URL=https://localhost
DB_ROOT_PASSWORD=ChangeMoi_RootPassword123!
DB_PASSWORD=ChangeMoi_PassboltPassword123!
EMAIL_FROM=ton-email@gmail.com
GMAIL_USERNAME=ton-email@gmail.com
GMAIL_APP_PASSWORD=ton-mot-de-passe-app-16-chars
EMAIL_FROM_NAME=Mon Équipe Passbolt
EOF

# 3. Créer le docker-compose.yml (utilise l'artifact gmail config)

# 4. Tester la configuration
docker compose config

# 5. Déployer
docker compose up -d

# 6. Suivre les logs
docker compose logs -f

# 7. Créer le premier admin (attendre 1-2 minutes)
------------------------------------------------------- Fin ----------------------------------------------------------------------------------------

# =================================================
# GESTION AVANCÉE DES STACKS DOCKER
# =================================================

# 1. ORGANISATION DE TES PROJETS
# ==============================

# Structure recommandée :
# ~/docker-projects/
# ├── passbolt/
# │   ├── docker-compose.yml
# │   └── .env
# ├── lamp/
# │   ├── docker-compose.yml
# │   └── www/
# └── monitoring/
#     ├── docker-compose.yml
#     └── config/

# 2. SCRIPT DE GESTION GLOBAL
# ===========================

#!/bin/bash
# docker-manager.sh - Gérer toutes tes stacks

PROJECTS_DIR=~/docker-projects

# Fonction pour lister tous les projets
list_all_stacks() {
    echo "🐳 === TOUTES MES STACKS === 🐳"
    echo ""
    
    for project_dir in $PROJECTS_DIR/*/; do
        if [[ -f "$project_dir/docker-compose.yml" ]]; then
            project_name=$(basename "$project_dir")
            echo "📁 Projet: $project_name"
            echo "   📍 Chemin: $project_dir"
            
            cd "$project_dir"
            if docker compose ps -q &>/dev/null; then
                echo "   🟢 Status: $(docker compose ps --services | wc -l) services"
                docker compose ps --format "table {{.Name}}\t{{.Status}}"
            else
                echo "   🔴 Status: Arrêté"
            fi
            echo ""
        fi
    done
}

# Fonction pour démarrer une stack
start_stack() {
    local stack_name=$1
    local project_dir="$PROJECTS_DIR/$stack_name"
    
    if [[ -f "$project_dir/docker-compose.yml" ]]; then
        echo "🚀 Démarrage de $stack_name..."
        cd "$project_dir"
        docker compose up -d
        echo "✅ $stack_name démarré"
    else
        echo "❌ Stack '$stack_name' introuvable"
    fi
}

# Fonction pour arrêter une stack
stop_stack() {
    local stack_name=$1
    local project_dir="$PROJECTS_DIR/$stack_name"
    
    if [[ -f "$project_dir/docker-compose.yml" ]]; then
        echo "⏹️ Arrêt de $stack_name..."
        cd "$project_dir"
        docker compose down
        echo "✅ $stack_name arrêté"
    else
        echo "❌ Stack '$stack_name' introuvable"
    fi
}

# Fonction pour voir les logs d'une stack
logs_stack() {
    local stack_name=$1
    local project_dir="$PROJECTS_DIR/$stack_name"
    
    if [[ -f "$project_dir/docker-compose.yml" ]]; then
        echo "📋 Logs de $stack_name..."
        cd "$project_dir"
        docker compose logs -f
    else
        echo "❌ Stack '$stack_name' introuvable"
    fi
}

# Fonction principale
case "$1" in
    "list"|"ls")
        list_all_stacks
        ;;
    "start")
        start_stack "$2"
        ;;
    "stop")
        stop_stack "$2"
        ;;
    "logs")
        logs_stack "$2"
        ;;
    "status")
        docker compose ls
        ;;
    *)
        echo "Usage: $0 {list|start|stop|logs|status} [stack_name]"
        echo ""
        echo "Exemples:"
        echo "  $0 list                    # Lister toutes les stacks"
        echo "  $0 start passbolt         # Démarrer la stack passbolt"
        echo "  $0 stop lamp              # Arrêter la stack lamp"
        echo "  $0 logs monitoring        # Voir les logs de monitoring"
        echo "  $0 status                 # Status global"
        ;;
esac

# 3. MONITORING EN TEMPS RÉEL
# ===========================

# Voir l'utilisation des ressources de toutes les stacks
docker stats --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}"

# Surveiller les logs de tous les projets
docker compose ls -q | xargs -I {} docker compose -p {} logs -f --tail=10

# 4. NETTOYAGE ET MAINTENANCE
# ===========================

# Nettoyer les conteneurs arrêtés de toutes les stacks
docker compose ls -q | xargs -I {} docker compose -p {} rm -f

# Supprimer les images inutilisées
docker image prune -f

# Supprimer les volumes orphelins
docker volume prune -f

# 5. SAUVEGARDE GLOBALE
# =====================

#!/bin/bash
# backup-all-stacks.sh

BACKUP_DIR=~/docker-backups/$(date +%Y%m%d)
mkdir -p $BACKUP_DIR

for project_dir in ~/docker-projects/*/; do
    project_name=$(basename "$project_dir")
    
    echo "💾 Sauvegarde de $project_name..."
    
    # Sauvegarde des fichiers de config
    cp -r "$project_dir" "$BACKUP_DIR/$project_name-config"
    
    # Sauvegarde des volumes
    cd "$project_dir"
    for volume in $(docker volume ls -q | grep "${project_name}"); do
        docker run --rm -v "$volume:/data" -v "$BACKUP_DIR:/backup" ubuntu tar czf "/backup/$volume.tar.gz" -C /data .
    done
done

echo "✅ Sauvegarde terminée dans $BACKUP_DIR"
----------------------------------------------------- Fin ------------------------------------------------------------------------------------------

# Docker Engine vs Portainer : Guide de Choix

## 🎯 Recommandation par Profil

### **Débutant/Intermédiaire → Portainer**
- Interface visuelle pour comprendre les concepts
- Feedback immédiat sur les actions
- Moins d'erreurs de syntaxe
- Courbe d'apprentissage plus douce

### **Avancé/DevOps → Docker Engine**
- Contrôle total et précision
- Scriptable et automatisable
- Performance optimale
- Standards de l'industrie

---

## 📊 Comparaison Détaillée

| Critère | Docker Engine | Portainer | Gagnant |
|---------|---------------|-----------|---------|
| **Sécurité** | ⭐⭐⭐⭐⭐ | ⭐⭐⭐⭐ | Docker Engine |
| **Performance** | ⭐⭐⭐⭐⭐ | ⭐⭐⭐⭐ | Docker Engine |
| **Facilité d'usage** | ⭐⭐⭐ | ⭐⭐⭐⭐⭐ | Portainer |
| **Contrôle** | ⭐⭐⭐⭐⭐ | ⭐⭐⭐ | Docker Engine |
| **Monitoring** | ⭐⭐ | ⭐⭐⭐⭐⭐ | Portainer |
| **Automatisation** | ⭐⭐⭐⭐⭐ | ⭐⭐ | Docker Engine |
| **Apprentissage** | ⭐⭐ | ⭐⭐⭐⭐⭐ | Portainer |

---

## 🔐 Sécurité

### Docker Engine
```bash
✅ Moins de surface d'attaque
✅ Pas d'interface web exposée
✅ Contrôle granulaire des permissions
✅ Audit trails natifs
❌ Plus complexe à sécuriser correctement
```

### Portainer
```bash
✅ Interface sécurisée avec RBAC
✅ Authentification centralisée
✅ SSL/TLS intégré
❌ Interface web = surface d'attaque supplémentaire
❌ Couche supplémentaire à maintenir
```

---

## ⚡ Performance

### Docker Engine
```bash
✅ Communication directe avec Docker daemon
✅ Pas d'overhead d'interface
✅ Optimisé pour la production
✅ Ressources minimales utilisées
```

### Portainer
```bash
✅ Performance acceptable pour la plupart des cas
❌ Overhead de l'interface web
❌ Requêtes API supplémentaires
❌ Consommation mémoire/CPU de Portainer
```

---

## 🎨 Facilité d'Usage

### Docker Engine
```bash
❌ Courbe d'apprentissage abrupte
❌ Syntaxe à mémoriser
❌ Pas de feedback visuel
✅ Documentation excellente
✅ Communauté énorme
```

### Portainer
```bash
✅ Interface intuitive
✅ Drag & drop pour certaines actions
✅ Visualisation des logs en temps réel
✅ Templates prêts à l'emploi
❌ Peut masquer la complexité sous-jacente
```

---

## 🚀 Ma Recommandation Progressive

### Phase 1 : Apprentissage (1-3 mois)
**Utilise Portainer** pour :
- Comprendre visuellement Docker
- Éviter les erreurs de syntaxe
- Voir l'impact de tes actions
- Gagner en confiance

### Phase 2 : Maîtrise (3-6 mois)  
**Hybride : Portainer + Docker Engine**
- Portainer pour le monitoring/debugging
- Docker Engine pour les déploiements
- Scripts Docker Engine pour l'automatisation

### Phase 3 : Production (6+ mois)
**Docker Engine principalement**
- Scripts d'automatisation
- CI/CD intégré
- Infrastructure as Code
- Portainer comme outil d'appoint

---

## 🏭 Pour Ton Contexte Actuel

Vu que tu apprends et veux **comprendre ton infrastructure** :

### Recommandation : **Approche Hybride**

1. **Portainer** pour débuter :
   - Visualiser tes conteneurs
   - Comprendre les concepts
   - Gérer facilement

2. **Docker Engine** en parallèle :
   - Apprendre les commandes
   - Créer des scripts
   - Comprendre le "pourquoi"

---

## 🎯 Plan d'Action Concret

### Semaine 1-2 : Portainer
- Installer Portainer
- Déployer Passbolt via Portainer  
- Explorer l'interface
- Comprendre visuellement

### Semaine 3-4 : Docker Engine
- Refaire la même stack en CLI
- Comparer les approches
- Créer des scripts basiques

### Semaine 5+ : Hybride
- Portainer pour monitoring
- Docker Engine pour déploiements
- Scripts pour automatisation

---

## ⚠️ Points d'Attention

### Éviter les Pièges Portainer
- Ne pas devenir dépendant de l'interface
- Toujours comprendre les commandes sous-jacentes
- Versionner tes configurations (YAML)

### Éviter les Pièges Docker Engine
- Ne pas négliger la surveillance
- Bien documenter tes scripts
- Mettre en place des backups